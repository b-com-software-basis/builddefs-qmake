# Author(s) : Loic Touraine
# Check resource compiled files existence

# detect system codesign
exists("/usr/bin/codesign") {
    SYSTEM_SIGNTOOL_CMD = "/usr/bin/codesign"
} else {
    message("Unable to find codesign application : check your Xcode and Developer Tools installation")
}
SYSTEM_SIGNTOOL_PARAMS = --force --sign --deep

MAC_PLUGINS_ROOT_PATH = $$(HOME)/Library/Audio/Plug-Ins
include(bcom_plist_bundle.prf)

for (BUNDLE_EXTENSION, QMAKE_BUNDLE_EXTENSION_LIST) {
    equals(BUNDLE_EXTENSION,.aaxplugin) {
        MAC_PLUGIN_SUBFOLDER = DigiDesign
    }
    equals(BUNDLE_EXTENSION,.vst) {
        MAC_PLUGIN_SUBFOLDER = VST
    }
    equals(BUNDLE_EXTENSION,.vst3) {
        MAC_PLUGIN_SUBFOLDER = VST3
    }
    equals(BUNDLE_EXTENSION,.component)|equals(BUNDLE_EXTENSION,.appex) {
        MAC_PLUGIN_SUBFOLDER = Components
        bcom_component_bundle_prepare.depends += $$RESMERGER_DIR/$${TARGET}$${first(QMAKE_EXT_RESMERGER)}
        component_resources.path = Contents/Resources
        component_resources.files = $$RESMERGER_DIR/$${TARGET}$${first(QMAKE_EXT_RESMERGER)}
        component_resources.depends = $$RESMERGER_DIR/$${TARGET}$${first(QMAKE_EXT_RESMERGER)}
        QMAKE_BUNDLE_DATA += component_resources
    }

    !equals(BUNDLE_INSTALL_CMD,"") {
        BUNDLE_INSTALL_CMD += &&
    }
    BUNDLE_INSTALL_CMD += cp -rf $${TARGET}$${BUNDLE_EXTENSION} $${MAC_PLUGINS_ROOT_PATH}/$${MAC_PLUGIN_SUBFOLDER}

    !equals(BUNDLE_UNINSTALL_CMD,"") {
        BUNDLE_UNINSTALL_CMD += &&
    }
    BUNDLE_UNINSTALL_CMD += rm -rf $${MAC_PLUGINS_ROOT_PATH}/$${MAC_PLUGIN_SUBFOLDER}/$${TARGET}$${BUNDLE_EXTENSION}

    !equals(BUNDLE_PREPARE_CMD,"") {
        BUNDLE_PREPARE_CMD += &&
    }
    BUNDLE_PREPARE_CMD += mkdir -p $${TARGET}$${BUNDLE_EXTENSION}/Contents

    !equals(BUNDLE_PACKAGE_CMD,"") {
        BUNDLE_PACKAGE_CMD += &&
    }
    BUNDLE_PACKAGE_CMD += cp -f $$OUT_PWD/PkgInfo$${BUNDLE_EXTENSION}.txt $${TARGET}$${BUNDLE_EXTENSION}/Contents/PkgInfo
    BUNDLE_PACKAGE_CMD += && cp -f $$OUT_PWD/Info$${BUNDLE_EXTENSION}.plist $${TARGET}$${BUNDLE_EXTENSION}/Contents/Info.plist

    for (bundle_data, QMAKE_BUNDLE_DATA) {
        for (bundle_file, $${bundle_data}.files) {
            create_bundle.depends += $${bundle_file}
            for (bundle_path, $${bundle_data}.path ) {
                !equals(BUNDLE_PREPARE_CMD,"") {
                    BUNDLE_PREPARE_CMD += &&
                }
                !equals(BUNDLE_PACKAGE_CMD,"") {
                    BUNDLE_PACKAGE_CMD += &&
                }
                BUNDLE_PREPARE_CMD += mkdir -p $${TARGET}$${BUNDLE_EXTENSION}/$${bundle_path}
                # Handle Info.plist

                BUNDLE_PACKAGE_CMD += cp -f $${bundle_file} $${TARGET}$${BUNDLE_EXTENSION}/$${bundle_path}/
            }
        }
    }

    for (bundle_binary, QMAKE_BUNDLE_BINARY) {
        for (bundle_file, $${bundle_binary}.files) {
            for (bundle_path, $${bundle_binary}.path ) {
                !equals(BUNDLE_PREPARE_CMD,"") {
                    BUNDLE_PREPARE_CMD += &&
                }
                !equals(BUNDLE_PACKAGE_CMD,"") {
                    BUNDLE_PACKAGE_CMD += &&
                }
                BUNDLE_PREPARE_CMD += mkdir -p $${TARGET}$${BUNDLE_EXTENSION}/$${bundle_path}
                BUNDLE_PACKAGE_CMD += cp -f $${bundle_file} $${TARGET}$${BUNDLE_EXTENSION}/$${bundle_path}/$${TARGET}
            }
        }
    }

    !equals(BUNDLE_PACKAGE_CLEAN_CMD,"") {
        BUNDLE_PACKAGE_CLEAN_CMD += &&
    }
    BUNDLE_PACKAGE_CLEAN_CMD += rm -rf $${TARGET}$${BUNDLE_EXTENSION}


    #############
    # sign bundle
    #############
    !equals(BUNDLE_SIGN_CMD,"") {
        BUNDLE_SIGN_CMD += &&
    }
    !equals(BUNDLE_EXTENSION,.aaxplugin) {
        !isEmpty(SYSTEM_SIGNTOOL_CMD) {
            BUNDLE_SIGN_CMD += $${SYSTEM_SIGNTOOL_CMD} $${SYSTEM_SIGNTOOL_PARAMS} $${PRODUCT_SYSTEM_CERTIFCATE_NAME} $${TARGET}$${BUNDLE_EXTENSION}
        }
    }
}

bcom_component_bundle_clean.commands = $${BUNDLE_PACKAGE_CLEAN_CMD}
bcom_component_bundle_prepare.commands = $$BUNDLE_PREPARE_CMD
bcom_component_bundle_prepare.depends += bcom_component_bundle_clean

#Files copy in bundle must occur after the library build : the bcom_component_bundle depends on the Makefile's $(TARGET)
create_bundle.commands = $$BUNDLE_PACKAGE_CMD
create_bundle.depends += bcom_component_bundle_prepare $(TARGET)

sign_bundle.commands = $$BUNDLE_SIGN_CMD
sign_bundle.depends = $$create_bundle

install_bundle.commands = $$BUNDLE_INSTALL_CMD
install_bundle.depends += create_bundle $(TARGET)

uninstall_bundle.commands = $$BUNDLE_UNINSTALL_CMD



#QMAKE doesn't manage adding targets from inference rules : we need to explicitly declare each target even when they are dependent on each other
QMAKE_EXTRA_TARGETS += bcom_component_bundle_clean bcom_component_bundle_prepare create_bundle install_bundle uninstall_bundle sign_bundle

#NOTE: DO NOT PUT bcom_component_bundle in POST or PRE_TARGETDEPS as it will create a circular dependent upon $(TARGET) and will result in the build of the target AFTER the bcom_component_bundle target
#which gives an error (the target to copy doesn't exists)
