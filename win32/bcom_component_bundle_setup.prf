# Author(s) : Stephane Leduc

include (bcom_check_setup.pri)

COPYLOGO_CLEAN_CMD = IF EXIST $${OUT_PWD}/logo.ico $$QMAKE_DEL_FILE /f $$shell_path($${OUT_PWD}/logo.ico)
bcom_copylogo_clean.commands = $${COPYLOGO_CLEAN_CMD}

bcom_copylogo_prepare.commands = copy $$shell_quote($$shell_path($${SETUP_ICO_FILE})) $$shell_quote($$shell_path($${OUT_PWD}/logo.ico))
bcom_copylogo_prepare.depends += bcom_copylogo_clean $(TARGET)
create_setup.depends += bcom_copylogo_prepare
SETUP_ICO_FILE=$$shell_quote($$shell_path($${OUT_PWD}/logo.ico))

#init unused value
SETUP_SUFFIX =

SETUP_INSTALLDIR_VALUE = $${SETUP_INSTALLDIR}

# detect system signtool
SYSTEM_SIGNTOOL_CMD = $$shell_quote($$shell_path($$system(where signtool)))
isEmpty(SYSTEM_SIGNTOOL_CMD) {
    signtool_arch = x64
    contains(CONFIG, x86) {
        signtool_arch = x86
    }
    PATH = $$shell_quote($$shell_path($$getenv(WindowsSdkVerBinPath)/$${signtool_arch}/signtool.exe))
    exists($${PATH}) {
        SYSTEM_SIGNTOOL_CMD = $${PATH}
    } else {
        message("Unable to find signtool application : check your Msvc installation")
    }   
}
SYSTEM_SIGNTOOL_PARAMS = sign /t http://timestamp.digicert.com

# manage packaging according to plugin extension
for (PLUGIN_EXTENSION, QMAKE_PLUGIN_EXTENSION_LIST) {

    #reset value for new plugin
    SETUP_SUFFIX =
    SETUP_COPYDIR_VALUE =

    # default install dir
    isEmpty(SETUP_INSTALLDIR) {
        contains(PLUGIN_EXTENSION,.aaxplugin) {
            SETUP_INSTALLDIR_VALUE=$$(PROGRAMW6432)/Common Files/Avid/Audio/Plug-Ins/
        }
        contains(PLUGIN_EXTENSION,.dll) {
            SETUP_INSTALLDIR_VALUE=$$(PROGRAMW6432)/Steinberg/VSTPlugins/
        }
        contains(PLUGIN_EXTENSION,.vst3) {
            SETUP_INSTALLDIR_VALUE=$$(PROGRAMW6432)/Common Files/VST3/
        }
    }

    # AAX plugin
    contains(PLUGIN_EXTENSION,.aaxplugin) {

        # manage 32/64bit build
        contains(BCOM_TARGET_ARCH, x86_64) {
            AAXPLUGIN_ARCH = x64
        }
        contains(BCOM_TARGET_ARCH, i386) {
            AAXPLUGIN_ARCH = Win32
        }

        # prepare AAX output dir
        aax_dir_prepare.path = Contents
        aax_dir_prepare.files = $$shell_quote($$shell_path($$PWD/assets/aax/PlugIn.ico))
        QMAKE_SETUP_AAX_DIR_PREPAPRE += aax_dir_prepare
        for (setup_data, QMAKE_SETUP_AAX_DIR_PREPAPRE) {
            for (setup_file, $${setup_data}.files) {
                for (setup_path, $${setup_data}.path ) {
                    !equals(AAXBUNDLE_PREPARE_CMD,"") {
                        AAXBUNDLE_PREPARE_CMD += &&
                    }
                    AAXBUNDLE_PREPARE_CMD += IF NOT EXIST $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/$${setup_path}/$${AAXPLUGIN_ARCH})) mkdir $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/$${setup_path}/$${AAXPLUGIN_ARCH}))
                    AAXBUNDLE_PREPARE_CMD += && copy /Y $${setup_file} $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/)) >NUL
                    AAXBUNDLE_PREPARE_CMD += && attrib -r $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}))
                    #AAXBUNDLE_PREPARE_CMD += attrib -h -r -s %OutDir%\..\..\desktop.ini
                    AAXBUNDLE_PREPARE_CMD += && echo [.ShellClassInfo] > $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && echo IconResource=PlugIn.ico,0 >> $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && echo ;For compatibility with Windows XP >> $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && echo IconFile=PlugIn.ico >> $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && echo IconIndex=0 >> $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && attrib +h +r +s $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/PlugIn.ico))
                    AAXBUNDLE_PREPARE_CMD += && attrib +h +r +s $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/desktop.ini))
                    AAXBUNDLE_PREPARE_CMD += && attrib +r $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}))
                }
            }
        }

        # Copy binary to output dir
        for (setup_binary, QMAKE_SETUP_BINARY) {
            for (setup_file, $${setup_binary}.files) {
                for (setup_path, $${setup_binary}.path ) {
                    !equals(AAXBUNDLE_PREPARE_CMD,"") {
                        AAXBUNDLE_PREPARE_CMD += &&
                    }
                    AAXBUNDLE_PREPARE_CMD += copy /Y $${setup_file} $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/$${setup_path}/$${AAXPLUGIN_ARCH}/$${TARGET}$${PLUGIN_EXTENSION}))
                }
            }
        }

        # Copy ressources to output dir
        !isEmpty(SETUP_COPYDIR) {
            aax_pluginconfig.path = Contents
            aax_pluginconfig.files = $${SETUP_COPYDIR}
            QMAKE_SETUP_CONFIG += aax_pluginconfig

            for (setup_binary, QMAKE_SETUP_CONFIG) {
                for (setup_file, $${setup_binary}.files) {
                    for (setup_path, $${setup_binary}.path ) {
                        !equals(AAXBUNDLE_PREPARE_CMD,"") {
                            AAXBUNDLE_PREPARE_CMD += &&
                        }
                        AAXBUNDLE_PREPARE_CMD += $$QMAKE_COPY_DIR $${SETUP_COPYDIR} $$shell_quote($$shell_path($${TARGET}$${PLUGIN_EXTENSION}/$${setup_path}/$${AAXPLUGIN_ARCH}))
                    }
                }
            }
        }

        # manage clean
        AAXBUNDLE_PACKAGE_CLEAN_CMD = IF EXIST $${TARGET}$${PLUGIN_EXTENSION} rmdir /S /Q $${TARGET}$${PLUGIN_EXTENSION}
        bcom_component_aaxbundle_clean.commands = $${AAXBUNDLE_PACKAGE_CLEAN_CMD}

        bcom_component_aaxbundle_prepare.commands = $${AAXBUNDLE_PREPARE_CMD}
        bcom_component_aaxbundle_prepare.depends += bcom_component_aaxbundle_clean $(TARGET)
        create_bundle.depends += bcom_component_aaxbundle_prepare

        SETUP_SUFFIX = AAX
    }

    contains(PLUGIN_EXTENSION,.vst3) {
        VST3_PREPARE_CMD += $$QMAKE_COPY $${TARGET}.$${DYNLIBEXT} $${TARGET}$${PLUGIN_EXTENSION}
        bcom_component_vst3bundle_prepare.commands = $${VST3_PREPARE_CMD}
        create_bundle.depends += bcom_component_vst3bundle_prepare
        SETUP_SUFFIX = VST3
    }

    #############
    # sign bundle
    #############
    !equals(BUNDLE_SIGN_CMD,"") {
        BUNDLE_SIGN_CMD += &&
    }
    !contains(PLUGIN_EXTENSION,.aaxplugin) {
        !isEmpty(SYSTEM_SIGNTOOL_CMD) {
            isEmpty(SYSTEM_SIGNTOOL_STORE_NAME) {
                SYSTEM_SIGNTOOL_STORE_NAME = My
            }
            BUNDLE_SIGN_CMD += $${SYSTEM_SIGNTOOL_CMD} $${SYSTEM_SIGNTOOL_PARAMS} /s $${SYSTEM_SIGNTOOL_STORE_NAME} /n $${PRODUCT_SYSTEM_CERTIFCATE_NAME} $${TARGET}$${PLUGIN_EXTENSION}
        }
    }

    # VST plugin
    contains(PLUGIN_EXTENSION,.dll|.vst3) {
        # nsis parameters (separate management from AAX)
        SETUP_COPYDIR_VALUE = $$SETUP_COPYDIR
    }

    # Nsis management
    NSISCOMMAND = $$shell_quote($$shell_path($${MAKENSIS_COMMAND})) \
                                /DSETUP_PRODUCTNAME=$$shell_quote($${SETUP_PRODUCTNAME} $${SETUP_SUFFIX}) /DSETUP_FILENAME=$${SETUP_FILENAME}$${SETUP_SUFFIX} \
                                /DSETUP_VERSION=$${SETUP_VERSION} /DSETUP_GUID=$${SETUP_GUID}$${SETUP_SUFFIX} \
                                /DSETUP_INSTALLDIR=$$shell_quote($$shell_path($${SETUP_INSTALLDIR_VALUE})) /DSETUP_ICO_FILE=$${SETUP_ICO_FILE} \
                                /DSETUP_MANUFACTURER=$$shell_quote($${SETUP_MANUFACTURER}) \
                                /DSETUP_COPYRIGHT=$$shell_quote($${QMAKE_TARGET_COPYRIGHT})

    SETUP_COPYFILEPATH=$$shell_quote($$shell_path($${OUT_PWD}/))
    SETUP_COPYFILENAME=$${TARGET}$${PLUGIN_EXTENSION}   # is a directory
    if (!isEmpty(SETUP_COPYFILEPATH):!isEmpty(SETUP_COPYFILENAME)){
        NSISCOMMAND += /DSETUP_COPYFILEPATH=$${SETUP_COPYFILEPATH} /DSETUP_COPYFILENAME=$${SETUP_COPYFILENAME}
    }

    !isEmpty(SETUP_SUBINSTALLDIR) {
        NSISCOMMAND += /DSETUP_SUBINSTALLDIR=$${SETUP_SUBINSTALLDIR}
    }
    # only for VST3
    !isEmpty(SETUP_COPYDIR_VALUE) {
        NSISCOMMAND += /DSETUP_COPYDIR=$${SETUP_COPYDIR_VALUE}
    }

    contains(SETUP_NSIS_INFO,CUSTOMIZE_ONINIT) {
        NSISCOMMAND += /DCUSTOMIZE_ONINIT
    }
    contains(SETUP_NSIS_INFO,CUSTOMIZE_DISPLAY_PAGE_COMPONENTS) {
        NSISCOMMAND += /DCUSTOMIZE_DISPLAY_PAGE_COMPONENTS
    }
    contains(SETUP_NSIS_INFO,CUSTOMIZE_ADDTOPATH) {
        NSISCOMMAND += /DCUSTOMIZE_ADDTOPATH
    }

    NSISSETUP_FILEPFX = $$nsisReplaceSpecialCharacter($${SETUP_FILEPFX})
    NSISCOMMAND += $$shell_quote(/XOutFile $$shell_quote($$shell_path($${OUT_PWD}/$${NSISSETUP_FILEPFX}$${SETUP_FILENAME}$${SETUP_SUFFIX}.exe))) \
                   $$shell_quote($$shell_path($$OUT_PWD/Setup.nsi))

    # manage setup
    !equals(NSIS_PACKAGE_CMD,"") {
        NSIS_PACKAGE_CMD += &&
    }
    NSIS_PACKAGE_CMD += $${NSISCOMMAND}
}

sign_bundle.commands += $${BUNDLE_SIGN_CMD}
sign_bundle.depends += create_bundle

create_setup.commands = $${NSIS_PACKAGE_CMD}
#create_setup.depends += create_bundle

QMAKE_EXTRA_TARGETS  += bcom_copylogo_clean bcom_copylogo_prepare bcom_component_aaxbundle_clean bcom_component_aaxbundle_prepare bcom_component_vst3bundle_prepare create_bundle create_setup sign_bundle

